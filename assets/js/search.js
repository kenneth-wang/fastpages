
var documents = [{
    "id": 0,
    "url": "https://kenneth-wang.github.io/404.html",
    "title": "",
    "body": " 404 Page not found :(  The requested page could not be found. "
    }, {
    "id": 1,
    "url": "https://kenneth-wang.github.io/about/",
    "title": "About Me",
    "body": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. This website is powered by fastpages 1.       a blogging platform that natively supports Jupyter notebooks in addition to other formats.  &#8617;    "
    }, {
    "id": 2,
    "url": "https://kenneth-wang.github.io/categories/",
    "title": "Tags",
    "body": "Contents: {% if site. categories. size &gt; 0 %} {% for category in site. categories %} {% capture category_name %}{{ category | first }}{% endcapture %} {{ category_name }}{% endfor %}{% endif %} {% for category in site. categories %}  {% capture category_name %}{{ category | first }}{% endcapture %} &lt;h3 id = {{ category_name }} &gt;&lt;i class= fas fa-tags category-tags-icon &gt;&lt;/i&gt;&lt;/i&gt; {{ category_name }}&lt;/h3&gt;&lt;a name= {{ category_name | slugize }} &gt;&lt;/a&gt;{% for post in site. categories[category_name] %}{%- assign date_format = site. minima. date_format | default:  %b %-d, %Y  -%}&lt;article class= archive-item &gt; &lt;p class= post-meta post-meta-title &gt;&lt;a class= page-meta  href= {{ site. baseurl }}{{ post. url }} &gt;{{post. title}}&lt;/a&gt; • {{ post. date | date: date_format }}&lt;/p&gt;&lt;/article&gt;{% endfor %} {% endfor %}"
    }, {
    "id": 3,
    "url": "https://kenneth-wang.github.io/images/copied_from_nb/",
    "title": "",
    "body": "WarningDo not manually save images into this folder. This is used by GitHub Actions to automatically copy images.  Any images you save into this folder could be deleted at build time. "
    }, {
    "id": 4,
    "url": "https://kenneth-wang.github.io/2020/02/29/_03_01_Smartie_Slackbot.html",
    "title": "Smartie",
    "body": "2020/02/29 -           TALK ABOUT CURRENT USE CASE FOR A BOT Overview of project directory&#182;      smartie/_______ data/___________ sp500_stocks. csv_______ src/___________ __init__. py___________ stock. py_______ app. py_______ crontab_______ conda. yml_______ Dockerfile_______ env. list_______ run. sh          %%capturefrom google. colab import drivedrive. mount(&#39;/content/gdrive/&#39;)%cd /content/gdrive/My Drive/Colab Notebooks/ssh_files/smartie_slackbotimport syssys. path. append(&quot;. &quot;)  Go to this URL in a browser: https://accounts. google. com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i. apps. googleusercontent. com&amp;redirect_uri=urn%3aietf%3awg%3aoauth%3a2. 0%3aoob&amp;response_type=code&amp;scope=email%20https%3a%2f%2fwww. googleapis. com%2fauth%2fdocs. test%20https%3a%2f%2fwww. googleapis. com%2fauth%2fdrive%20https%3a%2f%2fwww. googleapis. com%2fauth%2fdrive. photos. readonly%20https%3a%2f%2fwww. googleapis. com%2fauth%2fpeopleapi. readonlyEnter your authorization code:··········        from credentials import SLACK_API_TOKEN, CHANNEL_ID, SLACK_BOT_TOKEN, SLACK_SIGNING_SECRET, ALPHA_VANTAGE_KEY          range_start_date = &quot;2020-01-01&quot;range_end_date = &quot;2020-12-31&quot;          %%capture# !pip install alpha-vantage==2. 1. 3# !pip install beautiful soup4==4. 8. 2# !pip install slack==0. 0. 2# !pip install slackclient==2. 5. 0# !pip install slackeventsapi==2. 1. 0# !pip install websocket-client==0. 57. 0          import requestsimport timeimport pandas as pdimport numpy as npimport slackimport ssl as ssl_libimport certifiimport datetimefrom bs4 import BeautifulSoupfrom alpha_vantage. timeseries import TimeSeriesfrom pandas. tseries. holiday import USFederalHolidayCalendar as calendarfrom flask import Flaskfrom slackeventsapi import SlackEventAdapter    Get S&amp;P500 stocks from wikipedia&#182;      def get_sp500_stocks_wiki(url=&quot;https://en. wikipedia. org/wiki/List_of_S%26P_500_companies&quot;):  &quot;&quot;&quot;  Scapes a wikipedia web page to retrieve a table of S&amp;P500 component stocks  args:  ------    url: (str) url leading to the wikipedia web page  Return:  ------    df: (pd. DataFrame) a copy of the wikipedia table showcasing the S&amp;P500 component stocks  &quot;&quot;&quot;  website_url = requests. get(url)  soup = BeautifulSoup(website_url. text, &#39;lxml&#39;)  my_table = soup. find(&#39;table&#39;, {&#39;class&#39;: &#39;wikitable sortable&#39;})  my_table  table_rows = my_table. find_all(&#39;tr&#39;)  data = []  for row in table_rows:    data. append([t. text. strip() for t in row. find_all(&#39;td&#39;)])  df = pd. DataFrame(data[1:], columns=[&#39;Ticker&#39;, &#39;Security&#39;, &#39;SEC_Filings&#39;, &#39;GICS&#39;,                     &#39;GICS_Sub&#39;, &#39;HQ&#39;, &#39;Date_First_Added&#39;, \                     &#39;CIK&#39;, &#39;Founded&#39;])  return df          sp500_stocks_df = get_sp500_stocks_wiki()sp500_stocks_df. to_csv(&#39;. /data/sp500_stocks. csv&#39;)sp500_stocks_df. head(10)           Ticker   Security   SEC_Filings   GICS   GICS_Sub   HQ   Date_First_Added   CIK   Founded         0   MMM   3M Company   reports   Industrials   Industrial Conglomerates   St. Paul, Minnesota      0000066740   1902       1   ABT   Abbott Laboratories   reports   Health Care   Health Care Equipment   North Chicago, Illinois   1964-03-31   0000001800   1888       2   ABBV   AbbVie Inc.    reports   Health Care   Pharmaceuticals   North Chicago, Illinois   2012-12-31   0001551152   2013 (1888)       3   ABMD   ABIOMED Inc   reports   Health Care   Health Care Equipment   Danvers, Massachusetts   2018-05-31   0000815094   1981       4   ACN   Accenture plc   reports   Information Technology   IT Consulting &amp; Other Services   Dublin, Ireland   2011-07-06   0001467373   1989       5   ATVI   Activision Blizzard   reports   Communication Services   Interactive Home Entertainment   Santa Monica, California   2015-08-31   0000718877   2008       6   ADBE   Adobe Inc.    reports   Information Technology   Application Software   San Jose, California   1997-05-05   0000796343   1982       7   AMD   Advanced Micro Devices Inc   reports   Information Technology   Semiconductors   Santa Clara, California   2017-03-20   0000002488   1969       8   AAP   Advance Auto Parts   reports   Consumer Discretionary   Automotive Retail   Raleigh, North Carolina   2015-07-09   0001158449   1932       9   AES   AES Corp   reports   Utilities   Independent Power Producers &amp; Energy Traders   Arlington, Virginia   1998-10-02   0000874761   1981     Breaking down the Smartie Class&#182;Breakdown get_stocks_rsi. Gettiing the stocks and their RSI&#182;:       from src. stock import get_sp500_stocks_wiki, get_sp500_stocks_file, filter_stocks_industry, get_stock_price, get_stock_price_df, get_rsi    Breakdown the functions one by one To read the sp500 stock file we made above       def get_sp500_stocks_file(file_path=None):  &quot;&quot;&quot;  Reads a csv file containing the wikipedia S&amp;P500 component stocks table  args:  ------    file_path: (str) path leading to the csv file  Return:  ------    df: (pd. DataFrame) a copy of the wikipedia table showcasing the S&amp;P500 component stocks  &quot;&quot;&quot;  df = pd. read_csv(file_path)  return df          sp500_stocks_df = get_sp500_stocks_file(file_path=&quot;. /data/sp500_stocks. csv&quot;)sp500_stocks_df. head(10)           Unnamed: 0   Ticker   Security   SEC_Filings   GICS   GICS_Sub   HQ   Date_First_Added   CIK   Founded         0   0   MMM   3M Company   reports   Industrials   Industrial Conglomerates   St. Paul, Minnesota   NaN   66740   1902       1   1   ABT   Abbott Laboratories   reports   Health Care   Health Care Equipment   North Chicago, Illinois   1964-03-31   1800   1888       2   2   ABBV   AbbVie Inc.    reports   Health Care   Pharmaceuticals   North Chicago, Illinois   2012-12-31   1551152   2013 (1888)       3   3   ABMD   ABIOMED Inc   reports   Health Care   Health Care Equipment   Danvers, Massachusetts   2018-05-31   815094   1981       4   4   ACN   Accenture plc   reports   Information Technology   IT Consulting &amp; Other Services   Dublin, Ireland   2011-07-06   1467373   1989       5   5   ATVI   Activision Blizzard   reports   Communication Services   Interactive Home Entertainment   Santa Monica, California   2015-08-31   718877   2008       6   6   ADBE   Adobe Inc.    reports   Information Technology   Application Software   San Jose, California   1997-05-05   796343   1982       7   7   AMD   Advanced Micro Devices Inc   reports   Information Technology   Semiconductors   Santa Clara, California   2017-03-20   2488   1969       8   8   AAP   Advance Auto Parts   reports   Consumer Discretionary   Automotive Retail   Raleigh, North Carolina   2015-07-09   1158449   1932       9   9   AES   AES Corp   reports   Utilities   Independent Power Producers &amp; Energy Traders   Arlington, Virginia   1998-10-02   874761   1981     Select only top 100 stocks due to alpha vantage api limitations. Exclude some of the industries that are you are not interested in       def filter_stocks_industry(df, ind_excld=[]):  &quot;&quot;&quot;  Filters a dataframe based on the GICS Sector industry  args:  ------    df: (pd. DataFrame) a copy of the wikipedia table showcasing the S&amp;P500 component stocks    ind_excld: (list) GICS Sector industries to be excluded  Return:  ------    df_excld: (pd. DataFrame) filtered dataframe  &quot;&quot;&quot;  df_excld = df[~df[&#39;GICS&#39;]. isin(ind_excld)]  return df_excld          sp500_stocks_df_excld = filter_stocks_industry(sp500_stocks_df, ind_excld=[&#39;Health Care&#39;, &#39;Utilities&#39;, &#39;Energy&#39;])sp500_stocks_df_excld           Unnamed: 0   Ticker   Security   SEC_Filings   GICS   GICS_Sub   HQ   Date_First_Added   CIK   Founded         0   0   MMM   3M Company   reports   Industrials   Industrial Conglomerates   St. Paul, Minnesota   NaN   66740   1902       4   4   ACN   Accenture plc   reports   Information Technology   IT Consulting &amp; Other Services   Dublin, Ireland   2011-07-06   1467373   1989       5   5   ATVI   Activision Blizzard   reports   Communication Services   Interactive Home Entertainment   Santa Monica, California   2015-08-31   718877   2008       6   6   ADBE   Adobe Inc.    reports   Information Technology   Application Software   San Jose, California   1997-05-05   796343   1982       7   7   AMD   Advanced Micro Devices Inc   reports   Information Technology   Semiconductors   Santa Clara, California   2017-03-20   2488   1969       . . .    . . .    . . .    . . .    . . .    . . .    . . .    . . .    . . .    . . .    . . .        498   498   XLNX   Xilinx   reports   Information Technology   Semiconductors   San Jose, California   1999-11-08   743988   NaN       499   499   XYL   Xylem Inc.    reports   Industrials   Industrial Machinery   White Plains, New York   2011-11-01   1524472   NaN       500   500   YUM   Yum! Brands Inc   reports   Consumer Discretionary   Restaurants   Louisville, Kentucky   1997-10-06   1041061   NaN       501   501   ZBRA   Zebra Technologies   reports   Information Technology   Electronic Equipment &amp; Instruments   Lincolnshire, Illinois   2019-12-23   877212   1969       503   503   ZION   Zions Bancorp   reports   Financials   Regional Banks   Salt Lake City, Utah   2001-06-22   109380   NaN   389 rows × 10 columns         sp500_stocks_df_excld = sp500_stocks_df_excld. head(10)    Get the stock prices       def get_stock_price(df_excld):  &quot;&quot;&quot;  Retrieves the daily stock price from a dataframe of stocks and their respective tickers  args:  ------    df_excld: (pd. DataFrame) filtered dataframe comprising of stocks in focus  Return:  ------    info: (list) stock pricing/volume information for a particular period    symbols: (list) stock tickers  &quot;&quot;&quot;  ts = TimeSeries(ALPHA_VANTAGE_KEY)  info = []  symbols = []  counter = 0  for t in df_excld[&#39;Ticker&#39;]:    if counter % 5 == 0:      time. sleep(65)    i, m = ts. get_daily(symbol=t, outputsize=&#39;full&#39;)    info. append(i)    symbols. append(m[&#39;2. Symbol&#39;])    counter += 1  return info, symbols          info, symbols = get_stock_price(sp500_stocks_df_excld)          info[0][&#39;2020-02-28&#39;]  {&#39;1. open&#39;: &#39;154. 0900&#39;, &#39;2. high&#39;: &#39;156. 7200&#39;, &#39;3. low&#39;: &#39;146. 0000&#39;, &#39;4. close&#39;: &#39;149. 2400&#39;, &#39;5. volume&#39;: &#39;11431490&#39;}        symbols  [&#39;MMM&#39;, &#39;ACN&#39;, &#39;ATVI&#39;, &#39;ADBE&#39;, &#39;AMD&#39;, &#39;AAP&#39;, &#39;AFL&#39;, &#39;APD&#39;, &#39;AKAM&#39;, &#39;ALK&#39;]  Conver the information into a dataframe and rename the columns       def get_stock_price_df(info, symbols):  &quot;&quot;&quot;  Converts lists of pricing/volume information and the stocks symbols into a dataframe  args:  ------    info: (list) stock pricing/volume information for a particular period    symbols: (list) stock tickers  Return:  ------    df_full: (pd. DataFrame) consists of stock tickers their pricing/volume information  &quot;&quot;&quot;  df_l = []  for num, i in enumerate(info):    df = pd. DataFrame. from_dict(i, orient=&#39;index&#39;)    df[&#39;Symbol&#39;] = symbols[num]    df_l. append(df)  df_full = pd. concat(df_l)  df_full = df_full. rename(columns = {&#39;1. open&#39;:&#39;Open&#39;,                    &#39;2. high&#39;:&#39;High&#39;,                    &#39;3. low&#39;:&#39;Low&#39;,                    &#39;4. close&#39;:&#39;Close&#39;,                    &#39;5. volume&#39;:&#39;Volume&#39;})  return df_full          sp500_stocks_price_df = get_stock_price_df(info, symbols)sp500_stocks_price_df. head(10)           Open   High   Low   Close   Volume   Symbol         2020-02-28   154. 0900   156. 7200   146. 0000   149. 2400   11431490   MMM       2020-02-27   151. 2300   155. 4300   149. 0000   150. 1600   8217960   MMM       2020-02-26   149. 5700   151. 8200   148. 0900   148. 9600   5151670   MMM       2020-02-25   153. 3100   153. 4400   145. 9700   146. 8500   5262375   MMM       2020-02-24   154. 4500   154. 7100   152. 2200   152. 5500   3635549   MMM       2020-02-21   158. 3300   158. 5900   156. 1200   156. 9300   3535306   MMM       2020-02-20   159. 0000   161. 3900   158. 5000   158. 5600   3274479   MMM       2020-02-19   159. 0800   160. 4700   158. 3600   159. 3400   2296434   MMM       2020-02-18   160. 3600   160. 5300   158. 0400   158. 8800   2478890   MMM       2020-02-14   159. 8500   161. 1400   158. 8200   161. 0100   2233484   MMM     Get the rsi for the stocks       def get_rsi(prices, n=14):  &quot;&quot;&quot;  Calculates the Relative Strength Index (RSI) for a stock  Credits: sentdex - https://www. youtube. com/watch?v=4gGztYfp3ck  args:  ------    prices: (list) prices for a stock    n: (int) size of look-back period  Return:  ------    rsi: (float): momentum indicator that measures the magnitude of recent price changes to evaluate overbought or oversold conditions in the price of a stock or other asset    https://www. investopedia. com/terms/r/rsi. asp  &quot;&quot;&quot;  deltas = np. diff(prices)  seed = deltas[:n+1]  up = seed[seed &gt;= 0]. sum()/n  down = -seed[seed &lt; 0]. sum()/n  rs = up/down  rsi = np. zeros_like(prices)  rsi[:n] = 100. - 100. /(1. + rs)  for i in range(n, len(prices)):    delta = deltas[i-1]    if delta &gt; 0:      upval = delta      downval = 0.     else:      upval = 0.       downval = -delta    up = (up*(n-1) + upval)/n    down = (down*(n-1) + downval)/n    rs = up/down    rsi[i] = 100. - 100. /(1. +rs)  return rsi          symbols = sp500_stocks_price_df[&#39;Symbol&#39;]. unique()rsi_l = []status_l = []for s in symbols:  closep = np. array(sp500_stocks_price_df[sp500_stocks_price_df[&#39;Symbol&#39;] == s][&#39;Close&#39;]. tolist())  closep = closep. astype(np. float)  rsi = get_rsi(closep, n=14)  if rsi[-1] &gt;=70:    status = &#39;Above 70&#39;  elif rsi[-1] &lt;= 30:    status = &#39;Below 30&#39;  else:    status = &#39;Normal&#39;  rsi_l. append(round(rsi[-1], 1))  status_l. append(status)df_rsi = pd. DataFrame(zip(symbols, rsi_l, status_l),columns=[&#39;Symbols&#39;, &#39;RSI&#39;, &#39;Status&#39;])df_rsi. head(10)           Symbols   RSI   Status         0   MMM   50. 1   Normal       1   ACN   53. 1   Normal       2   ATVI   48. 8   Normal       3   ADBE   52. 0   Normal       4   AMD   29. 1   Below 30       5   AAP   44. 5   Normal       6   AFL   38. 9   Normal       7   APD   45. 7   Normal       8   AKAM   60. 4   Normal       9   ALK   42. 9   Normal     Putting it together and show the final output as follow       def get_stocks_rsi(rsi_n=14, stocks_n=100, file_path=&#39;. /data/sp500_stocks. csv&#39;, ind_excld=[&#39;Health Care&#39;, &#39;Utilities&#39;, &#39;Energy&#39;]):    &quot;&quot;&quot;      Calculates the Relative Strength Index (RSI) for a group of stocks      args:      ------        rsi_n: (list) size of rsi look-back period        stocks_n: (int) number of stocks to retrieve the rsi for        file_path: path leading to csv file of S&amp;P500 component stocks        ind_excld: (list) GICS Sector industries to be excluded      Return:      ------        df_rsi: (pd. DataFrame) returns the rsi reading for the list of stocks and whether the 30/70 level has been breached    &quot;&quot;&quot;    sp500_stocks_df = get_sp500_stocks_file(file_path=file_path)    sp500_stocks_df_excld = filter_stocks_industry(sp500_stocks_df, ind_excld=ind_excld)    sp500_stocks_df_excld = sp500_stocks_df_excld. head(stocks_n)    info, symbols = get_stock_price(sp500_stocks_df_excld)    sp500_stocks_price_df = get_stock_price_df(info, symbols)    symbols = sp500_stocks_price_df[&#39;Symbol&#39;]. unique()    rsi_l = []    status_l = []    for s in symbols:      closep = np. array(sp500_stocks_price_df[sp500_stocks_price_df[&#39;Symbol&#39;] == s][&#39;Close&#39;]. tolist())      closep = closep. astype(np. float)      rsi = get_rsi(closep, n=rsi_n)      if rsi[-1] &gt;=70:        status = &#39;Above 70&#39;      elif rsi[-1] &lt;= 30:        status = &#39;Below 30&#39;      else:        status = &#39;Normal&#39;      rsi_l. append(round(rsi[-1], 1))      status_l. append(status)    df_rsi = pd. DataFrame(zip(symbols, rsi_l, status_l),columns=[&#39;Symbols&#39;, &#39;RSI&#39;, &#39;Status&#39;])    return df_rsi          df_rsi = get_stocks_rsi(rsi_n=14, stocks_n=10, file_path=&#39;. /data/sp500_stocks. csv&#39;, ind_excld=[&#39;Health Care&#39;, &#39;Utilities&#39;, &#39;Energy&#39;])df_rsi. head(10)           Symbols   RSI   Status         0   MMM   50. 1   Normal       1   ACN   53. 1   Normal       2   ATVI   48. 8   Normal       3   ADBE   52. 0   Normal       4   AMD   29. 1   Below 30       5   AAP   44. 5   Normal       6   AFL   38. 9   Normal       7   APD   45. 7   Normal       8   AKAM   60. 4   Normal       9   ALK   42. 9   Normal     Breakdown the get_stocks_rsi in get_rsi_string. To convert the data we have in pd. Dataframe to string&#182;:       def get_rsi_string(df_rsi, head_n=20, tail_n=20):  &quot;&quot;&quot;    Converts the rsi reading into strings to be displayed in slack correctly    args:    ------      df_rsi: (pd. DataFrame) returns the rsi reading for the list of stocks and whether the 30/70 level has been breached      head_n: (int) number of top ranked stocks (based on rsi) reading to be displayed in slack      tail_n: (int) number of bottom ranked stocks (based on rsi) reading to be displayed in slack    Return:    ------      top_str: (str) concatenated string for the top ranked stocks&#39; rsi reading      btm_str: (str) concatenated string for the bottom ranked stocks&#39; rsi reading  &quot;&quot;&quot;  df_rsi = df_rsi. sort_values(&#39;RSI&#39;, ascending=False)  df_top = df_rsi. head(head_n)  df_btm = df_rsi. tail(tail_n)  top_symbols = df_top[&#39;Symbols&#39;]. tolist()  btm_symbols = df_btm[&#39;Symbols&#39;]. tolist()  top_rsi = df_top[&#39;RSI&#39;]. tolist()  btm_rsi = df_btm[&#39;RSI&#39;]. tolist()  top_l = list(zip(top_symbols, top_rsi))  btm_l = list(zip(btm_symbols, btm_rsi))  top_str = &quot;&quot;  for el in top_l:    top_str = top_str + str(el[0]) + &quot; &quot; + str(el[1]) + &quot;\n&quot;  btm_str = &quot;&quot;  for el in btm_l:    btm_str = btm_str + str(el[0]) + &quot; &quot; + str(el[1]) + &quot;\n&quot;  return top_str, btm_str          top_str, btm_str = get_rsi_string(df_rsi, head_n=5, tail_n=5)          top_str  &#39;AKAM 60. 4\nACN 53. 1\nADBE 52. 0\nMMM 50. 1\nATVI 48. 8\n&#39;        btm_str  &#39;APD 45. 7\nAAP 44. 5\nALK 42. 9\nAFL 38. 9\nAMD 29. 1\n&#39;  Breakdown get_message_payload_stock and get_message_payload. Connect to Slack's API&#182;: This is what we have so far! This is the complete Smartie Class       class Smartie:  &quot;&quot;&quot;App that sends stock analysis results for the day. &quot;&quot;&quot;  def __init__(self, channel):    self. channel = channel    self. username = &quot;smartie&quot;    self. icon_emoji = &quot;:robot_face:&quot;    self. timestamp = &quot;&quot;    self. reaction_task_completed = False    self. pin_task_completed = False    self. DIVIDER_BLOCK = {&quot;type&quot;: &quot;divider&quot;}  def get_stocks_rsi(self, rsi_n=14, stocks_n=100, file_path=&#39;. /data/sp500_stocks. csv&#39;, ind_excld=[&#39;Health Care&#39;, &#39;Utilities&#39;, &#39;Energy&#39;]):    &quot;&quot;&quot;      Calculates the Relative Strength Index (RSI) for a group of stocks      args:      ------        rsi_n: (list) size of rsi look-back period        stocks_n: (int) number of stocks to retrieve the rsi for        file_path: path leading to csv file of S&amp;P500 component stocks        ind_excld: (list) GICS Sector industries to be excluded      Return:      ------        df_rsi: (pd. DataFrame) returns the rsi reading for the list of stocks and whether the 30/70 level has been breached    &quot;&quot;&quot;    sp500_stocks_df = get_sp500_stocks_file(file_path=file_path)    sp500_stocks_df_excld = filter_stocks_industry(sp500_stocks_df, ind_excld=ind_excld)    sp500_stocks_df_excld = sp500_stocks_df_excld. head(stocks_n)    info, symbols = get_stock_price(sp500_stocks_df_excld)    sp500_stocks_price_df = get_stock_price_df(info, symbols)    symbols = sp500_stocks_price_df[&#39;Symbol&#39;]. unique()    rsi_l = []    status_l = []    for s in symbols:      closep = np. array(sp500_stocks_price_df[sp500_stocks_price_df[&#39;Symbol&#39;] == s][&#39;Close&#39;]. tolist())      closep = closep. astype(np. float)      rsi = get_rsi(closep, n=rsi_n)      if rsi[-1] &gt;=70:        status = &#39;Above 70&#39;      elif rsi[-1] &lt;= 30:        status = &#39;Below 30&#39;      else:        status = &#39;Normal&#39;      rsi_l. append(round(rsi[-1], 1))      status_l. append(status)    df_rsi = pd. DataFrame(zip(symbols, rsi_l, status_l),columns=[&#39;Symbols&#39;, &#39;RSI&#39;, &#39;Status&#39;])    return df_rsi  def get_rsi_string(self, df_rsi, head_n=20, tail_n=20):    &quot;&quot;&quot;      Converts the rsi reading into strings to be displayed in slack correctly      args:      ------        df_rsi: (pd. DataFrame) returns the rsi reading for the list of stocks and whether the 30/70 level has been breached        head_n: (int) number of top ranked stocks (based on rsi) reading to be displayed in slack        tail_n: (int) number of bottom ranked stocks (based on rsi) reading to be displayed in slack      Return:      ------        top_str: (str) concatenated string for the top ranked stocks&#39; rsi reading        btm_str: (str) concatenated string for the bottom ranked stocks&#39; rsi reading    &quot;&quot;&quot;    df_rsi = df_rsi. sort_values(&#39;RSI&#39;,ascending=False)    df_top = df_rsi. head(head_n)    df_btm = df_rsi. tail(tail_n)    top_symbols = df_top[&#39;Symbols&#39;]. tolist()    btm_symbols = df_btm[&#39;Symbols&#39;]. tolist()    top_rsi = df_top[&#39;RSI&#39;]. tolist()    btm_rsi = df_btm[&#39;RSI&#39;]. tolist()    top_l = list(zip(top_symbols, top_rsi))    btm_l = list(zip(btm_symbols, btm_rsi))    top_str = &quot;&quot;    for el in top_l:      top_str = top_str + str(el[0]) + &quot; &quot; + str(el[1]) + &quot;\n&quot;    btm_str = &quot;&quot;    for el in btm_l:      btm_str = btm_str + str(el[0]) + &quot; &quot; + str(el[1]) + &quot;\n&quot;    return top_str, btm_str  def _get_text_block(self, string):    &quot;&quot;&quot;      Helper function for get_message_payload_stock.       Used to convert a string into a slack formatted text block      args:      ------        string: (str) concatenated string for the top or bottom ranked stocks&#39; rsi reading      Return:      ------        dictionary containing the correctly formatted text block to be displayed in slack    &quot;&quot;&quot;    return {&quot;type&quot;: &quot;section&quot;, &quot;text&quot;: {&quot;type&quot;: &quot;mrkdwn&quot;, &quot;text&quot;: string}}  def get_message_payload_stock(self, top_str, btm_str):    &quot;&quot;&quot;      Used to create a message payload to send stock rsi readings      args:      ------        top_str: (str) concatenated string for the top ranked stocks&#39; rsi reading        bottom_str: (str) concatenated string for the bottom ranked stocks&#39; rsi reading      Return:      ------        dictionary containing payload (stock rsi readings) to be sent using Slack&#39;s API    &quot;&quot;&quot;    return {      &quot;ts&quot;: self. timestamp,      &quot;channel&quot;: self. channel,      &quot;username&quot;: self. username,      &quot;icon_emoji&quot;: self. icon_emoji,      &quot;blocks&quot;: [        self. _get_text_block(top_str),        self. DIVIDER_BLOCK,        self. _get_text_block(btm_str)      ],    }  def get_message_payload(self, string):    &quot;&quot;&quot;      Used to create a message payload to send simple text messages      args:      ------        string: (str) string to be sent using Slack&#39;s API      Return:      ------        dictionary containing payload (simple text messages) to be sent using Slack&#39;s API    &quot;&quot;&quot;    return {      &quot;ts&quot;: self. timestamp,      &quot;channel&quot;: self. channel,      &quot;username&quot;: self. username,      &quot;icon_emoji&quot;: self. icon_emoji,      &quot;text&quot;: string    }    The three methods that we have not covered so far below are used to send a message to Slack This method is for       def _get_text_block(self, string):  &quot;&quot;&quot;    Helper function for get_message_payload_stock.     Used to convert a string into a slack formatted text block    args:    ------      string: (str) concatenated string for the top or bottom ranked stocks&#39; rsi reading    Return:    ------      dictionary containing the correctly formatted text block to be displayed in slack  &quot;&quot;&quot;  return {&quot;type&quot;: &quot;section&quot;, &quot;text&quot;: {&quot;type&quot;: &quot;mrkdwn&quot;, &quot;text&quot;: string}}    This method is for       def get_message_payload_stock(self, top_str, btm_str):  &quot;&quot;&quot;    Used to create a message payload to send stock rsi readings    args:    ------      top_str: (str) concatenated string for the top ranked stocks&#39; rsi reading      bottom_str: (str) concatenated string for the bottom ranked stocks&#39; rsi reading    Return:    ------      dictionary containing payload (stock rsi readings) to be sent using Slack&#39;s API  &quot;&quot;&quot;  return {    &quot;ts&quot;: self. timestamp,    &quot;channel&quot;: self. channel,    &quot;username&quot;: self. username,    &quot;icon_emoji&quot;: self. icon_emoji,    &quot;blocks&quot;: [      self. _get_text_block(top_str),      self. DIVIDER_BLOCK,      self. _get_text_block(btm_str)    ],  }    This method is for       def get_message_payload(self, string):  &quot;&quot;&quot;    Used to create a message payload to send simple text messages    args:    ------      string: (str) string to be sent using Slack&#39;s API    Return:    ------      dictionary containing payload (simple text messages) to be sent using Slack&#39;s API  &quot;&quot;&quot;  return {    &quot;ts&quot;: self. timestamp,    &quot;channel&quot;: self. channel,    &quot;username&quot;: self. username,    &quot;icon_emoji&quot;: self. icon_emoji,    &quot;text&quot;: string  }    To demonstrate what kind of messages will be sent to Slack, lets first instantiate the object with out CHANNEL_ID       s = Smartie(CHANNEL_ID)    If it is a holiday. . . The function we need to identify whether it is a US Federal holiday is in the next section       message = s. get_message_payload(&#39;Market closed, US Federal holiday&#39;)message  {&#39;channel&#39;: &#39;CU560GVCG&#39;, &#39;icon_emoji&#39;: &#39;:robot_face:&#39;, &#39;text&#39;: &#39;Market closed, US Federal holiday&#39;, &#39;ts&#39;: &#39;&#39;, &#39;username&#39;: &#39;smartie&#39;}  If it is not a holiday. . .       message = s. get_message_payload_stock(top_str, btm_str)message  {&#39;blocks&#39;: [{&#39;text&#39;: {&#39;text&#39;: &#39;AKAM 60. 4\nACN 53. 1\nADBE 52. 0\nMMM 50. 1\nATVI 48. 8\n&#39;,  &#39;type&#39;: &#39;mrkdwn&#39;},  &#39;type&#39;: &#39;section&#39;}, {&#39;type&#39;: &#39;divider&#39;}, {&#39;text&#39;: {&#39;text&#39;: &#39;APD 45. 7\nAAP 44. 5\nALK 42. 9\nAFL 38. 9\nAMD 29. 1\n&#39;,  &#39;type&#39;: &#39;mrkdwn&#39;},  &#39;type&#39;: &#39;section&#39;}], &#39;channel&#39;: &#39;CU560GVCG&#39;, &#39;icon_emoji&#39;: &#39;:robot_face:&#39;, &#39;ts&#39;: &#39;&#39;, &#39;username&#39;: &#39;smartie&#39;}  Send the message       import slackslack_web_client = slack. WebClient(token=SLACK_BOT_TOKEN)          response = slack_web_client. chat_postMessage(**message)response  &lt;slack. web. slack_response. SlackResponse at 0x7f23864f4da0&gt;  Putting it together&#182;Complete Smartie Class&#182;: Other functions that we need&#182;:       def get_fed_holidays(start_date, end_date):  &quot;&quot;&quot;  Retrieve a dataframe outlining the days that the US market is closed (US Federal Holiday)  args:  ------    start_date: (str) start date for the period in focus    end_date: (str) end date for the period in focus  Return:  ------    df_holiday: (pd. DataFrame) outlines the days that are a US Federal Holiday  &quot;&quot;&quot;  dr = pd. date_range(start=start_date, end=end_date)  df = pd. DataFrame()  df[&#39;Date&#39;] = dr  cal = calendar()  holidays = cal. holidays(start=dr. min(), end=dr. max())  df[&#39;Holiday&#39;] = df[&#39;Date&#39;]. isin(holidays)  df_holiday = df[df[&#39;Holiday&#39;] == True]  return df_holiday    Putting it all together&#182;:       import logginglogger = logging. getLogger()logger. setLevel(logging. DEBUG)s = Smartie(CHANNEL_ID)logger. info(&#39;Getting fed holidays&#39;)range_start_date = &#39;2020-01-01&#39;range_end_date = &#39;2020-12-31&#39;fed_holiday = get_fed_holidays(start_date=range_start_date, end_date=range_end_date)if str(datetime. datetime. now(). date()) in fed_holiday:  logger. info(&#39;It is a Holiday&#39;)  message = s. get_message_payload(&#39;Market closed, US Federal holiday&#39;)else:  logger. info(&#39;It is not a Holiday&#39;)  df_rsi = s. get_stocks_rsi(rsi_n=14, stocks_n=10)  top_str, btm_str = s. get_rsi_string(df_rsi, head_n=5, tail_n=5)  message = s. get_message_payload_stock(top_str, btm_str)logger. info(&#39;Posting on Slack&#39;)response = slack_web_client. chat_postMessage(**message)    Creating Docker Image&#182;Dockerfile&#182;:       # our base imageFROM continuumio/miniconda3RUN apt update &amp;&amp; \  apt -y install bzip2 curl gcc ssh rsync git vim cron &amp;&amp; \  apt-get clean# copy all the files from project&#39;s root to working directoryCOPY src /codeCOPY data /codeCOPY app. py /codeCOPY run. sh /code# CondaARG CONDA_ENV_FILEARG CONDA_PATH=&quot;/root/miniconda3/bin&quot;ARG CONDA_BIN=&quot;$CONDA_PATH/conda&quot;COPY $CONDA_ENV_FILE $CONDA_ENV_FILEENV SHELL /bin/bashRUN conda install nb_condaENV PATH /root/miniconda3/envs/stock_screener/bin:$CONDA_PATH:$PATH# Update environmentCOPY conda. yml . RUN conda env update -n stock_screener --file . /conda. yml# Cron jobRUN printenv &gt;&gt; /etc/environmentENV PYTHONUNBUFFERED 1# Run shell scriptRUN chmod +x . /code/run. shENTRYPOINT [&quot;. /code/run. sh&quot;]    Conda. yml&#182;:       channels: - defaultsdependencies: - python=3. 6. 7 - pip=19. 0. 3 - nb_conda - pip:  - alpha-vantage==2. 1. 3  - beautifulsoup4==4. 8. 2  - pandas==1. 0. 1  - numpy==1. 18. 1  - slack==0. 0. 2  - slackclient==2. 5. 0  - slackeventsapi==2. 1. 0  - websocket-client==0. 57. 0    run. sh&#182;:       #!/bin/bashprintenv &gt; /etc/default/localeservice cron startecho &#39;Smartie is ready for action!&#39;ln -sf /proc/1/fd/1 /var/log/cron. logecho &#39;* * * * * root cd / &amp;&amp; /opt/conda/envs/stock_screener/bin/python . /app. py &gt;&gt; /var/log/cron. log&#39; &gt; /etc/crontabtail -f /var/log/cron. log    Crontab&#182;: Crontab file needs to have  cd /  and root, and an extra  #  at the bottom       * * * * * root echo &quot;Hello World&quot; &gt;&gt; /var/log/cron. log* * * * * root cd / &amp;&amp; /opt/conda/envs/stock_screener/bin/python . /app. py &gt;&gt; /var/log/cron. log#    Creating docker image on docker hub&#182;: Build the docker image       docker build -t kennethwang92/stock_screener    After building, you can tag it and push to docker hub       docker tag [image_id] kennethwang92/stock_screener:first_try    Login to docker hub on your terminal. Key in your username and password when prompted       docker login docker. io    Push image to docker hub       docker push kennethwang92/stock_screener:latest    Deploying on a Digital Ocean Server&#182;Creating a droplet&#182;: Set up an account with Digital Ocean here Create project Create droplet Choose ubuntu Choose plan Choose datacenter Create ssh Create ssh key (if required). Follow the instructions Click on create droplet Click on droplet Get ip and save it for later Preparing digital ocean (server)&#182;: Insert the ip address you have copied previously       ssh -i ~/. ssh/id_rsa root@[ip address]    Update apt-get       apt-get update    Install docker       apt install docker. io    Environment variables&#182;: First you need to create env. list with all your parameters and save the env. list file in root       SLACK_API_TOKEN= . . . . CHANNEL_ID= . . . . SLACK_BOT_TOKEN= . . . . SLACK_SIGNING_SECRET=. . . . ALPHA_VANTAGE_KEY=. . . .     Download image from docker run and create docker container&#182;:       docker pull kennethwang92/stock_screener:latest          docker run -it --env-file . /env. list kennethwang92/stock_screener:latest /bin/bash    Finally looking at our smartie chatbot&#182;If you are with me so far you should see the following in your terminal You should see the following in your slack channel For a full version of the files please see here&#182;Future improvements:&#182;More functions, include png graphs? "
    }, {
    "id": 5,
    "url": "https://kenneth-wang.github.io/fastpages/jupyter/2020/02/20/test.html",
    "title": "Fastpages Notebook Blog Post",
    "body": "2020/02/20 -           About&#182;This notebook is a demonstration of some of capabilities of fastpages with notebooks. With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! Front Matter&#182;: Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: Setting toc: true will automatically generate a table of contentsSetting badges: true will automatically include GitHub and Google Colab links to your notebook. Setting comments: true will enable commenting on your blog post, powered by utterances. More details and options for front matter can be viewed on the front matter section of the README. Markdown Shortcuts&#182;: put a #hide flag at the top of any cell you want to completely hide in the docs put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:              #collapse-hideimport pandas as pdimport altair as alt       put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:              #collapse-showcars = &#39;https://vega. github. io/vega-datasets/data/cars. json&#39;movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;sp500 = &#39;https://vega. github. io/vega-datasets/data/sp500. csv&#39;stocks = &#39;https://vega. github. io/vega-datasets/data/stocks. csv&#39;flights = &#39;https://vega. github. io/vega-datasets/data/flights-5k. json&#39;       Interactive Charts With Altair&#182;: Charts made with Altair remain interactive.  Example charts taken from this repo, specifically this notebook. Example 1: DropDown&#182;:       # single-value selection over [Major_Genre, MPAA_Rating] pairs# use specific hard-wired values as the initial selected valuesselection = alt. selection_single(  name=&#39;Select&#39;,  fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;],  init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;},  bind={&#39;Major_Genre&#39;: alt. binding_select(options=genres), &#39;MPAA_Rating&#39;: alt. binding_radio(options=mpaa)}) # scatter plot, modify opacity based on selectionalt. Chart(movies). mark_circle(). add_selection(  selection). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=&#39;IMDB_Rating:Q&#39;,  tooltip=&#39;Title:N&#39;,  opacity=alt. condition(selection, alt. value(0. 75), alt. value(0. 05)))    Example 2: Tooltips&#182;:       alt. Chart(movies). mark_circle(). add_selection(  alt. selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;])). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=alt. Y(&#39;IMDB_Rating:Q&#39;, axis=alt. Axis(minExtent=30)), # use min extent to stabilize axis title placement  tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;]). properties(  width=600,  height=400)    Example 3: More Tooltips&#182;:       # select a point for which to provide details-on-demandlabel = alt. selection_single(  encodings=[&#39;x&#39;], # limit selection to x-axis value  on=&#39;mouseover&#39;, # select on mouseover events  nearest=True,  # select data point nearest the cursor  empty=&#39;none&#39;   # empty selection includes no data points)# define our base line chart of stock pricesbase = alt. Chart(). mark_line(). encode(  alt. X(&#39;date:T&#39;),  alt. Y(&#39;price:Q&#39;, scale=alt. Scale(type=&#39;log&#39;)),  alt. Color(&#39;symbol:N&#39;))alt. layer(  base, # base line chart    # add a rule mark to serve as a guide line  alt. Chart(). mark_rule(color=&#39;#aaa&#39;). encode(    x=&#39;date:T&#39;  ). transform_filter(label),    # add circle marks for selected time points, hide unselected points  base. mark_circle(). encode(    opacity=alt. condition(label, alt. value(1), alt. value(0))  ). add_selection(label),  # add white stroked text to provide a legible background for labels  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),  # add text labels for stock prices  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),    data=stocks). properties(  width=700,  height=400)    Data Tables&#182;: You can display tables per the usual way in your blog:       movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;df = pd. read_json(movies)# display table with pandasdf[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;,   &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]]. head()           Title   Worldwide_Gross   Production_Budget   IMDB_Rating         0   The Land Girls   146083. 0   8000000. 0   6. 1       1   First Love, Last Rites   10876. 0   300000. 0   6. 9       2   I Married a Strange Person   203134. 0   250000. 0   6. 8       3   Let's Talk About Sex   373615. 0   300000. 0   NaN       4   Slam   1087521. 0   1000000. 0   3. 4     Images&#182;: Local Images&#182;: You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax: ![](my_icons/fastai_logo. png) Remote Images&#182;: Remote images can be included with the following markdown syntax: ![](https://image. flaticon. com/icons/svg/36/36686. svg) Animated Gifs&#182;: Animated Gifs work, too! ![](https://upload. wikimedia. org/wikipedia/commons/7/71/ChessPawnSpecialMoves. gif) Captions&#182;: You can include captions with markdown images like this: ![](https://www. fast. ai/images/fastai_paper/show_batch. png  Credit: https://www. fast. ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ ) Other Elements&#182;Tweetcards&#182;: Typing &gt; twitter: https://twitter. com/jakevdp/status/1204765621767901185?s=20 will render this:Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Youtube Videos&#182;: Typing &gt; youtube: https://youtu. be/XfoYk_Z5AkI will render this: Boxes / Callouts&#182;: Typing &gt; Warning: There will be no second warning! will render this:    Warning: There will be no second warning! Typing &gt; Important: Pay attention! It's important. will render this:    Important: Pay attention! It&#8217;s important. Typing &gt; Tip: This is my tip. will render this:    Tip: This is my tip. Typing &gt; Note: Take note of this. will render this:    Note: Take note of this. Typing &gt; Note: A doc link to [an example website: fast. ai](https://www. fast. ai/) should also work fine. will render in the docs:    Note: A doc link to an example website: fast. ai should also work fine. "
    }, {
    "id": 6,
    "url": "https://kenneth-wang.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
    "title": "Example Markdown Post",
    "body": "2020/01/14 - Basic setup: Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-filename. md Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. . md is the file extension for markdown files. The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. Basic formatting: You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: Lists: Here’s a list:  item 1 item 2And a numbered list:  item 1 item 2Boxes and stuff:  This is a quotation    You can include alert boxes…and…    You can include info boxesImages: Code: General preformatted text: # Do a thingdo_thing()Python code and output: # Prints '2'print(1+1)2Tables:       Column 1   Column 2         A thing   Another thing   Tweetcards: Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019Footnotes:       This is the footnote.  &#8617;    "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')
    this.metadataWhitelist = ['position']

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}